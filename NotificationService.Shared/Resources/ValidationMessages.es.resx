<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidIntegerError" xml:space="preserve">
    <value>El valor debe ser un número entero válido.</value>
  </data>
  <data name="InvalidDecimalError" xml:space="preserve">
    <value>El valor debe ser un número decimal válido.</value>
  </data>
  <data name="InvalidDateError" xml:space="preserve">
    <value>El valor debe ser una fecha válida en el formato yyyy-MM-dd.</value>
  </data>
  <data name="InvalidIntegerListError" xml:space="preserve">
    <value>El valor debe ser una lista de números enteros separados por comas.</value>
  </data>
  <data name="RequiredFieldError" xml:space="preserve">
    <value>El campo es obligatorio y no puede estar vacío.</value>
  </data>
  <data name="InvalidFieldError" xml:space="preserve">
    <value>El campo no es válido.</value>
  </data>
  <data name="FieldMaxLengthError" xml:space="preserve">
    <value>El campo no puede superar los {0} caracteres.</value>
  </data>
  <data name="FieldMustBeGreaterThanZeroError" xml:space="preserve">
    <value>El campo debe ser mayor que 0.</value>
  </data>
  <data name="FieldRangeError" xml:space="preserve">
    <value>El campo debe ser un valor entre {0} y {1}.</value>
  </data>
  <data name="InvalidEmailError" xml:space="preserve">
    <value>El valor debe ser una dirección de correo electrónico válida.</value>
  </data>
  <data name="RequiredPushNotificationRecipientError" xml:space="preserve">
    <value>Se debe proporcionar al menos un destinatario: UserId o RoleId.</value>
  </data>
  <data name="InvalidEmailListError" xml:space="preserve">
    <value>Las siguientes direcciones de correo electrónico no son válidas: {0}</value>
  </data>
  <data name="InvalidEmailTemplateError" xml:space="preserve">
    <value>Si no se proporciona el asunto o el cuerpo, se debe proporcionar el ID de la plantilla.</value>
  </data>
  <data name="InvalidEnumError" xml:space="preserve">
    <value>El valor debe ser un {0} válido. Los valores válidos son: {1}.</value>
  </data>
  <data name="RequiredEmailNotificationRecipientError" xml:space="preserve">
    <value>Se debe proporcionar al menos un destinatario: UserId, RoleId o To.</value>
  </data>
  <data name="InvalidJsonFormat" xml:space="preserve">
    <value>Formato JSON no válido. Mensaje original: {0}</value>
  </data>
  <data name="EmptyRequestBody" xml:space="preserve">
    <value>El cuerpo de la solicitud no puede estar vacío.</value>
  </data>
  <data name="InvalidJsonPropertyFormat" xml:space="preserve">
    <value>Formato de propiedad JSON no válido. Mensaje original: {0}</value>
  </data>
  <data name="InvalidFormFieldFormat" xml:space="preserve">
    <value>Formato de campo de formulario inválido. Mensaje original: {0}.</value>
  </data>
  <data name="InvalidQueryParameter" xml:space="preserve">
    <value>El parámetro de consulta '{0}' no es un valor válido para el tipo '{1}'.</value>
  </data>
  <data name="InvalidRouteParameter" xml:space="preserve">
    <value>El parámetro de ruta '{0}' no es un valor válido para el tipo '{1}'.</value>
  </data>
  <data name="ModelBindingError" xml:space="preserve">
    <value>No se pudo vincular el modelo con los datos proporcionados.</value>
  </data>
</root>