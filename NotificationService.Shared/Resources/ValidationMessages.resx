<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidIntegerError" xml:space="preserve">
    <value>The value must be a valid integer.</value>
  </data>
  <data name="InvalidDecimalError" xml:space="preserve">
    <value>The value must be a valid decimal number.</value>
  </data>
  <data name="InvalidDateError" xml:space="preserve">
    <value>The value must be a valid date in the format yyyy-MM-dd.</value>
  </data>
  <data name="InvalidIntegerListError" xml:space="preserve">
    <value>The value must be a comma-separated list of integers.</value>
  </data>
  <data name="RequiredFieldError" xml:space="preserve">
    <value>The field is required and cannot be empty.</value>
  </data>
  <data name="InvalidFieldError" xml:space="preserve">
    <value>The field is not valid.</value>
  </data>
  <data name="FieldMaxLengthError" xml:space="preserve">
    <value>The field cannot exceed {0} characters.</value>
  </data>
  <data name="FieldMustBeGreaterThanZeroError" xml:space="preserve">
    <value>The field must be greater than 0.</value>
  </data>
  <data name="FieldRangeError" xml:space="preserve">
    <value>The field must be a value between {0} and {1}.</value>
  </data>
  <data name="InvalidEmailError" xml:space="preserve">
    <value>The value must be a valid email address.</value>
  </data>
  <data name="RequiredPushNotificationRecipientError" xml:space="preserve">
    <value>At least one recipient must be provided: UserId or RoleId.</value>
  </data>
  <data name="InvalidEmailListError" xml:space="preserve">
    <value>The following email addresses are invalid: {0}</value>
  </data>
  <data name="InvalidEmailTemplateError" xml:space="preserve">
    <value>If the subject or body is not provided, the template ID must be provided.</value>
  </data>
  <data name="InvalidEnumError" xml:space="preserve">
    <value>The value must be a valid {0}. Valid values are: {1}.</value>
  </data>
  <data name="RequiredEmailNotificationRecipientError" xml:space="preserve">
    <value>At least one recipient must be provided: UserId, RoleId, or To.</value>
  </data>
  <data name="InvalidJsonFormat" xml:space="preserve">
    <value>Invalid JSON format. Original Message: {0}</value>
  </data>
  <data name="EmptyRequestBody" xml:space="preserve">
    <value>Request body cannot be empty.</value>
  </data>
  <data name="InvalidJsonPropertyFormat" xml:space="preserve">
    <value>Invalid JSON property format. Original Message: {0}</value>
  </data>
  <data name="InvalidFormFieldFormat" xml:space="preserve">
    <value>Invalid form field format. Original Message: {0}</value>
  </data>
  <data name="InvalidQueryParameter" xml:space="preserve">
    <value>The query parameter '{0}' is not a valid value for the type '{1}'.</value>
  </data>
  <data name="InvalidRouteParameter" xml:space="preserve">
    <value>The route parameter '{0}' is not a valid value for the type '{1}'.</value>
  </data>
  <data name="ModelBindingError" xml:space="preserve">
    <value>Unable to bind model for the given input.</value>
  </data>
</root>